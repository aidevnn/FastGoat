using System.Numerics;
using System.Text.RegularExpressions;

namespace FastGoat.Commons;

public static class EllipticExt
{
    private static string[] EllDBStr =
    [
        "[0, -1, 1, -7820, -263580]; 11.a1; 11; (0) x [1]",
        "[0, 1, 1, -769, -8470]; 19.a1; 19; (0) x [1]",
        "[1, 0, 1, -460, -3830]; 26.a1; 26; (0) x [1]",
        "[0, 0, 0, 0, -108]; 108.a1; 108; (0) x [1]",
        "[0, 0, 1, 0, -4219]; 225.d1; 225; (0) x [1]",
        "[0, 0, 1, 0, -61]; 243.b1; 243; (0) x [1]",
        "[1, 0, 1, -2731, -55146]; 14.a1; 14; (0) x [2]",
        "[1, 0, 1, -171, -874]; 14.a2; 14; (0) x [2]",
        "[1, 1, 1, -2160, -39540]; 15.a1; 15; (0) x [2]",
        "[0, 0, 0, 0, -27]; 36.a3; 36; (0) x [2]",
        "[0, 0, 0, 0, -1]; 144.a3; 144; (0) x [2]",
        "[0, 0, 0, 0, 27]; 144.a4; 144; (0) x [2]",
        "[0, 1, 1, -9, -15]; 19.a2; 19; (0) x [3]",
        "[0, 1, 1, 1, 0]; 19.a3; 19; (0) x [3]",
        "[1, 0, 1, -5, -8]; 26.a2; 26; (0) x [3]",
        "[0, 0, 1, 0, -7]; 27.a3; 27; (0) x [3]",
        "[0, 0, 1, 0, 0]; 27.a4; 27; (0) x [3]",
        "[0, 0, 0, 0, 4]; 108.a2; 108; (0) x [3]",
        "[1, 1, 1, -135, -660]; 15.a2; 15; (0) x [2, 2]",
        "[1, 1, 1, -80, 242]; 15.a4; 15; (0) x [4]",
        "[1, 1, 1, 0, 0]; 15.a7; 15; (0) x [4]",
        "[1, -1, 1, -6, -4]; 17.a2; 17; (0) x [2, 2]",
        "[1, -1, 1, -1, -14]; 17.a3; 17; (0) x [4]",
        "[1, 0, 0, -49, -136]; 21.a2; 21; (0) x [2, 2]",
        "[0, -1, 1, -10, -20]; 11.a2; 11; (0) x [5]",
        "[0, -1, 1, 0, 0]; 11.a3; 11; (0) x [5]",
        "[1, 1, 1, 0, 1]; 38.b2; 38; (0) x [5]",
        "[1, 0, 1, -36, -70]; 14.a3; 14; (0) x [6]",
        "[1, 0, 1, -11, 12]; 14.a4; 14; (0) x [6]",
        "[1, 0, 1, -1, 0]; 14.a5; 14; (0) x [6]",
        "[0, 0, 0, 0, 1]; 36.a4; 36; (0) x [6]",
        "[1, -1, 1, -3, 3]; 26.b2; 26; (0) x [7]",
        "[1, 0, 0, -1, 137]; 174.e2; 174; (0) x [7]",
        "[1, 0, 0, 159, 1737]; 258.f2; 258; (0) x [7]",
        "[1, 1, 1, -10, -10]; 15.a5; 15; (0) x [4, 2]",
        "[1, 1, 1, -5, 2]; 15.a6; 15; (0) x [4, 2]",
        "[1, 1, 1, 35, -28]; 15.a8; 15; (0) x [8]",
        "[1, 0, 0, -39, 90]; 21.a3; 21; (0) x [8]",
        "[1, 0, 0, -4, -1]; 21.a5; 21; (0) x [4, 2]",
        "[1, 1, 1, -4, 5]; 42.a5; 42; (0) x [8]",
        "[1, -1, 1, -14, 29]; 54.b2; 54; (0) x [9]",
        "[1, 0, 0, 108, 11664]; 714.i3; 714; (0) x [9]",
        "[1, -1, 1, 63058, -7866691]; 1890.x3; 1890; (0) x [9]",
        "[1, 0, 0, -45, 81]; 66.c3; 66; (0) x [10]",
        "[1, 0, 0, 115, 561]; 66.c4; 66; (0) x [10]",
        "[1, 0, 0, -828, 9072]; 150.c1; 150; (0) x [10]",
        "[1, 0, 1, -19, 26]; 30.a6; 30; (0) x [6, 2]",
        "[1, -1, 1, -3002, 63929]; 90.c3; 90; (0) x [6, 2]",
        "[1, -1, 1, -122, 1721]; 90.c7; 90; (0) x [12]",
        "[1, 0, 1, -578, 2756]; 210.b6; 210; (0) x [6, 2]",
        "[1, 0, 1, 1922, 20756]; 210.b8; 210; (0) x [12]",
        "[1, 0, 0, -25725, 1577457]; 2730.bd7; 2730; (0) x [12]",
        "[1, 0, 0, -1070, 7812]; 210.e6; 210; (0) x [8, 2]",
        "[1, 0, 0, -8696090, 9838496100]; 46410.ck6; 46410; (0) x [8, 2]",
        "[0, 0, 1, -1, 0]; 37.a1; 37; (1) x [1]",
        "[0, 1, 1, 0, 0]; 43.a1; 43; (1) x [1]",
        "[1, -1, 1, 0, 0]; 53.a1; 53; (1) x [1]",
        "[0, 0, 1, 0, -34]; 225.c1; 225; (1) x [1]",
        "[0, 0, 1, 0, 1]; 225.c2; 225; (1) x [1]",
        "[0, 0, 1, 0, -1]; 243.a1; 243; (1) x [1]",
        "[1, 0, 0, -1, 0]; 65.a1; 65; (1) x [2]",
        "[1, 0, 0, 4, 1]; 65.a2; 65; (1) x [2]",
        "[1, 0, 1, -12, -16]; 82.a1; 82; (1) x [2]",
        "[0, 0, 0, 0, -216]; 576.e3; 576; (1) x [2]",
        "[0, 0, 0, 0, 8]; 576.e4; 576; (1) x [2]",
        "[0, 0, 0, 0, -343]; 1764.e3; 1764; (1) x [2]",
        "[0, 1, 1, -7, 5]; 91.b2; 91; (1) x [3]",
        "[0, 1, 1, 13, 42]; 91.b3; 91; (1) x [3]",
        "[0, 1, 0, -2, 1]; 124.a1; 124; (1) x [3]",
        "[0, 0, 1, 0, 20]; 243.a2; 243; (1) x [3]",
        "[0, 0, 1, 0, 12]; 441.d2; 441; (1) x [3]",
        "[0, 0, 0, 0, 100]; 900.d2; 900; (1) x [3]",
        "[1, -1, 1, -41, 96]; 117.a3; 117; (1) x [2, 2]",
        "[1, -1, 1, 4, 6]; 117.a4; 117; (1) x [4]",
        "[0, -1, 0, -129, 609]; 192.a1; 192; (1) x [4]",
        "[0, -1, 0, -9, 9]; 192.a2; 192; (1) x [2, 2]",
        "[1, -1, 0, -198, 1120]; 198.a2; 198; (1) x [2, 2]",
        "[1, -1, 1, -22, 44]; 205.a3; 205; (1) x [4]",
        "[0, 1, 1, -10, 10]; 123.a1; 123; (1) x [5]",
        "[0, -1, 1, 10, 6]; 155.a2; 155; (1) x [5]",
        "[0, -1, 1, -148, 748]; 175.a1; 175; (1) x [5]",
        "[1, 0, 1, -33, 68]; 130.a2; 130; (1) x [6]",
        "[1, 0, 1, -13, 156]; 130.a3; 130; (1) x [6]",
        "[0, 1, 0, -100, -252]; 220.a3; 220; (1) x [6]",
        "[1, -1, 1, -19353, 958713]; 574.g2; 574; (1) x [7]",
        "[1, -1, 1, -5582262, 5077966149]; 4730.d1; 4730; (1) x [7]",
        "[1, 0, 0, -1144386, 471132612]; 6378.d1; 6378; (1) x [7]",
        "[0, -1, 0, -784, 8704]; 336.a2; 336; (1) x [4, 2]",
        "[1, 0, 0, -429, 3384]; 429.b4; 429; (1) x [4, 2]",
        "[1, 1, 1, -12789, 551346]; 609.a4; 609; (1) x [4, 2]",
        "[1, 1, 1, -17714, 900047]; 966.g2; 966; (1) x [8]",
        "[0, 1, 0, -24400, 1458548]; 1680.p1; 1680; (1) x [8]",
        "[1, 0, 0, -1785, 194922]; 1785.e5; 1785; (1) x [8]",
        "[1, 0, 0, 12948, 421776]; 1482.j3; 1482; (1) x [9]",
        "[1, 0, 0, -4767, 127449]; 1554.l2; 1554; (1) x [9]",
        "[1, 0, 0, -35358150, 80924422500]; 15810.u1; 15810; (1) x [9]",
        "[1, 0, 0, -454955, 118072977]; 6270.r2; 6270; (1) x [10]",
        "[1, 0, 0, -27275, 2000625]; 6270.r4; 6270; (1) x [10]",
        "[1, 0, 0, -187842820, 990906448400]; 29370.bm3; 29370; (1) x [10]",
        "[1, 0, 1, -286854, 58872856]; 2310.h5; 2310; (1) x [6, 2]",
        "[1, 0, 0, -471900, 124722000]; 4290.bb5; 4290; (1) x [12]",
        "[1, 0, 0, -31900, 1610000]; 4290.bb6; 4290; (1) x [6, 2]",
        "[1, 0, 0, -5557266, -3547208700]; 6630.v6; 6630; (1) x [6, 2]",
        "[1, 0, 0, -2096146, 1124611076]; 6630.v7; 6630; (1) x [12]",
        "[1, 0, 0, -749461, 263897441]; 30030.bt7; 30030; (1) x [12]",
        "[1, 0, 0, -49423080, 130545230400]; 82110.bs5; 82110; (1) x [8, 2]",
        "[0, 1, 1, -2, 0]; 389.a1; 389; (2) x [1]",
        "[1, 0, 0, 0, 1]; 433.a1; 433; (2) x [1]",
        "[1, -1, 0, -4, 4]; 446.a1; 446; (2) x [1]",
        "[0, 0, 1, 0, -6]; 4761.d1; 4761; (2) x [1]",
        "[0, 0, 1, 0, 155]; 4761.d2; 4761; (2) x [1]",
        "[0, 0, 1, 0, -8]; 8649.a1; 8649; (2) x [1]",
        "[0, 1, 0, -65, -161]; 1088.a1; 1088; (2) x [2]",
        "[0, 1, 0, -25, 39]; 1088.a2; 1088; (2) x [2]",
        "[1, 1, 1, -9, 6]; 1443.a1; 1443; (2) x [2]",
        "[0, 0, 0, 0, -1367631]; 49284.e3; 49284; (2) x [2]",
        "[0, 0, 0, 0, 50653]; 49284.e4; 49284; (2) x [2]",
        "[0, 0, 0, 0, -17576]; 97344.cx3; 97344; (2) x [2]",
        "[1, 0, 1, -75, 242]; 1862.a1; 1862; (2) x [3]",
        "[1, 0, 1, -680, 6762]; 2366.a1; 2366; (2) x [3]",
        "[1, 0, 0, -387, 2881]; 2666.c2; 2666; (2) x [3]",
        "[0, 0, 1, 0, 90]; 9747.d2; 9747; (2) x [3]",
        "[0, 0, 0, 0, 225]; 24300.e2; 24300; (2) x [3]",
        "[0, 0, 0, 0, 3844]; 34596.g2; 34596; (2) x [3]",
        "[1, 1, 1, -813, 3906]; 2175.b2; 2175; (2) x [2, 2]",
        "[1, 1, 1, -688, 6656]; 2175.b3; 2175; (2) x [4]",
        "[0, -1, 0, -289, 289]; 3264.c2; 3264; (2) x [2, 2]",
        "[0, -1, 0, 1151, 1153]; 3264.c4; 3264; (2) x [4]",
        "[1, 1, 1, -71, -196]; 3315.a2; 3315; (2) x [2, 2]",
        "[1, -1, 1, -5351, 151976]; 3663.a1; 3663; (2) x [4]",
        "[1, 1, 1, -2365, 43251]; 5302.h2; 5302; (2) x [5]",
        "[0, -1, 1, -51898, 4567948]; 11825.b1; 11825; (2) x [5]",
        "[0, 1, 1, -840, 39800]; 13881.a2; 13881; (2) x [5]",
        "[1, 0, 1, -29074, 1902216]; 14630.b3; 14630; (2) x [6]",
        "[1, 0, 1, -2454, 6872]; 14630.b4; 14630; (2) x [6]",
        "[1, 0, 1, -18791, 989850]; 15022.a2; 15022; (2) x [6]",
        "[1, 0, 0, -11619, 462024]; 14763.f4; 14763; (2) x [4, 2]",
        "[1, 1, 1, -44854, -1361869]; 17958.i4; 17958; (2) x [4, 2]",
        "[1, 1, 1, -4925125, 4204962242]; 19065.c4; 19065; (2) x [4, 2]",
        "[1, 0, 0, -139676614, 635368533620]; 253506.bg1; 253506; (2) x [8]",
        "[1, 1, 1, -15141210, 22670813415]; 308490.bx4; 308490; (2) x [8]",
        "[1, 0, 0, -1927252846, 32565217284740]; 356730.by4; 356730; (2) x [6, 2]",
        "[0, 0, 1, -7, 6]; 5077.a1; 5077; (3) x [1]",
        "[1, -1, 1, -6, 0]; 11197.a1; 11197; (3) x [1]",
        "[1, -1, 0, -16, 28]; 11642.a1; 11642; (3) x [1]",
        "[0, 0, 1, 0, -27]; 309123.a1; 309123; (3) x [1]",
        "[0, 0, 1, 0, 722]; 309123.a2; 309123; (3) x [1]",
        "[0, 0, 1, 0, -1546]; 471969.b1; 471969; (3) x [1]",
        "[1, 0, 1, -231, -442]; 59450.a1; 59450; (3) x [2]",
        "[1, 0, 1, -131, 558]; 59450.a2; 59450; (3) x [2]",
        "[0, 1, 0, -145, 399]; 61376.c1; 61376; (3) x [2]",
        "[1, -1, 0, -3516, 81116]; 201042.a2; 201042; (3) x [3]",
        "[1, 0, 0, -1282, 36036]; 216634.c1; 216634; (3) x [3]",
        "[1, -1, 0, -199881, 34443873]; 240426.e1; 240426; (3) x [3]",
        "[1, -1, 1, -54788, 369542]; 174915.b3; 174915; (3) x [2, 2]",
        "[1, -1, 0, -123993, 16705885]; 185562.d3; 185562; (3) x [2, 2]",
        "[0, 0, 0, -13251, 474370]; 199728.b2; 199728; (3) x [2, 2]",
        "[0, 0, 0, -1889771, 961189146]; 217328.c2; 217328; (3) x [4]",
        "[0, 0, 0, 64084, 46225200]; 279616.i4; 279616; (3) x [4]",
        "[0, -1, 0, -787520, 269255232]; 305040.s1; 305040; (3) x [4]",
        "[1, -1, 0, -79, 289]; 234446.a1; 234446; (4) x [1]",
        "[0, 1, 1, -72, 210]; 501029.a1; 501029; (4) x [1]",
        "[0, 0, 1, -7, 36]; 545723.a1; 545723; (4) x [1]",
        "[0, 0, 1, -79, 342]; 19047851.a1; 19047851; (5) x [1]",
        "[0, 0, 1, -169, 930]; 64921931.a1; 64921931; (5) x [1]",
        "[0, 1, 1, -30, 390]; 67445803.a1; 67445803; (5) x [1]"
    ];

    public static (string name, BigInteger conductor, int rank, int ordTors, int[] torsType, BigInteger[] model)[]
        LMFDB_Ell_Q()
    {
        var ellDB = EllDBStr.Select(e =>
            {
                var arr = Regex.Replace(e, @"\[|\]|\(|\)|\s", "").Split(';');
                var model = arr[0].Split(",").Select(BigInteger.Parse).ToArray();
                var name = arr[1];
                var conductor = BigInteger.Parse(arr[2]);
                var arr2 = arr[3].Split('x');
                var rank = int.Parse(arr2[0]);
                var torsType = arr2[1].Split(',').Select(int.Parse).ToArray();
                var ordTors = torsType.Aggregate((ai, aj) => ai * aj);
                return (name, conductor, rank, ordTors, torsType, model);
            })
            .OrderBy(e => e.rank)
            .ThenBy(e => e.ordTors)
            .ThenBy(e => e.conductor)
            .ToArray();

        return ellDB;
    }
}