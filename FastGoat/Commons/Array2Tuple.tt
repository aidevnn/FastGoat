<#@ template language="C#" #>
<#@ output extension=".cs"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    string Glue<T>(IEnumerable<T> ts, string sep = "", string fmt = "{0}")
    {
        return string.Join(sep, ts.Select(t => string.Format(fmt, t)));
    }
#>
using System.Collections;

namespace FastGoat.Commons;

public class Array2Tuple<T> : IEquatable<Array2Tuple<T>>, IEnumerable<T>
{
    private IEnumerable<T> array { get; }

    public Array2Tuple(IEnumerable<T> arr)
    {
        array = arr;
    }

    public T this[int index] => array.ElementAt(index);
<#
    for (int i = 2; i < 10; i++)
    {
        var ais = Enumerable.Range(0, i).Select(j => $"a{j}").ToArray();
        var parms = Glue(ais, ", ", "out T {0}");
        var lhs = Glue(ais, ", ");
        var rhs = Glue(Enumerable.Range(0, i), ", ", "this[{0}]");
#>

    public void Deconstruct(<#= parms #>)
    {
        (<#= lhs #>) = (<#= rhs #>);
    }
<#
    }
#>

    public override string ToString()
    {
        return $"({array.Glue(", ")})";
    }

    public bool Equals(Array2Tuple<T>? other) => other != null && other.array.SequenceEqual(array);

    public override int GetHashCode() => (array.Count(), typeof(T)).GetHashCode();

    public IEnumerator<T> GetEnumerator() => array.GetEnumerator();

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }
}