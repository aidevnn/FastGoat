<#@ template language="C#" #>
<#@ output extension=".cs"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>

<#
    string Glue<T>(IEnumerable<T> ts, string sep = "", string fmt = "{0}")
    {
        return string.Join(sep, ts.Select(t => string.Format(fmt, t)));
    }
#>
using System.Collections;
using FastGoat.Structures.GenericGroup;

namespace FastGoat.Structures.CartesianProduct;

<#
    for (var k = 2; k <= 6; ++k)
    {
        var l = Enumerable.Range(0, k).ToArray();
        var Gi = l.Select(i => $"G{i + 1}").ToArray();
        var gi = l.Select(i => $"g{i + 1}").ToArray();
        var Ei = l.Select(i => $"E{i + 1}").ToArray();
        var ei = l.Select(i => $"e{i + 1}").ToArray();
        var Ti = l.Select(i => $"T{i + 1}").ToArray();
        var tn = string.Join(",", Ti);
        var whereTn = string.Join(" ", Ti.Select(t => $"where {t}:struct, IElt<{t}>"));
        var gpk = $"Gp{k}<{tn}>";
        var epk = $"Ep{k}<{tn}>";
        var pigtk = l.Select(i => $"public IGroup<{Ti[i]}> {Gi[i]} {{get;}}").ToArray();

        var igtk = l.Select(i => $"IGroup<{Ti[i]}> {gi[i]}").ToArray();
        var Gigi = l.Select(i => $"{Gi[i]} = {gi[i]};").ToArray();

        var hshgi = l.Select(i => $"{gi[i]}.Hash");
        var neuti = l.Select(i => $"{Gi[i]}.Neutral()");
        var invi = l.Select(i => $"{Gi[i]}.Invert(e.{Ei[i]})");
        var opi = l.Select(i => $"{Gi[i]}.Op(e1.{Ei[i]},e2.{Ei[i]})");
        var dyni = l.Select(i => $"us0[{i}] = us1.Item{i + 1};").ToArray();
        var crgi = l.Select(i => $"var {ei[i]} = {Gi[i]}[us0[{i}]];").ToArray();
        var fori = l.Select(i => $"foreach(var {ei[i]} in {Gi[i]})").ToArray();

        var TiEi = l.Select(i => $"public {Ti[i]} {Ei[i]} {{get ;}}").ToArray();
        var Tiei = l.Select(i => $"{Ti[i]} {ei[i]}").ToArray();
        var Eiei = l.Select(i => $"{Ei[i]} = {ei[i]};").ToArray();
        var hshei = l.Select(i => $"{ei[i]}.Hash");
        var compi = l.Select(i => $"other.{Ei[i]}");

        var eli = (int i, int j) => i != j ? $"{Gi[j]}.Neutral()" : "e";
        var canfor = l.Select(i => $"foreach(var e in {Gi[i]}.GetGenerators())").ToArray();
        var cantpl = l.Select(i => Glue(l.Select(j => eli(i, j)), ", ")).Select(s => $"new {epk}({s});").ToArray();
#>

public readonly struct <#= gpk #> : IGroup<<#= epk #>> <#= whereTn #>
{
        public string Name { get; }
<#
        for (var i = 0; i < k; ++i)
        {
#>
        <#= pigtk[i] #>
<#
        }
#>
        public Gp<#= k #>(<#= Glue(igtk, ", ") #>)
        {
<#
        for (var i = 0; i < k; ++i)
        {
#>
                <#= Gigi[i] #>
<#
        }
#>
                Hash = (<#= Glue(hshgi, ", ") #>).GetHashCode();
                Name = $"<#= Glue(Gi, " x ", "{{{0}}}") #>";
        }

        public bool Equals(IGroup<<#= epk #>>? other) => other?.Hash == Hash;
        public int Hash { get; }
        public <#= epk #> Neutral() => new(<#= Glue(neuti, ", ") #>);
        public <#= epk #> Invert(<#= epk #> e) => new(<#= Glue(invi, ", ") #>);
        public <#= epk #> Op(<#= epk #> e1, <#= epk #> e2) => new(<#= Glue(opi, ", ") #>);

        public <#= epk #> this[params ValueType[] us]
        {
                get 
        {
                dynamic us0 = new ValueType[<#= k #>];
                if (us.Length == 1)
                {
                        dynamic us1 = us[0];
<#
        for (var i = 0; i < k; ++i)
        {
#>
                <#= dyni[i] #>
<#
        }
#>
                }
                else if (us.Length == <#= k #>)
                        us0 = us;
                else
                        throw new GroupException(GroupExceptionType.GroupDef);
<#
        for (var i = 0; i < k; ++i)
        {
#>
                <#= crgi[i] #>
<#
        }
#>
                return new(<#= Glue(ei, ", ") #>);
        }
        }

        public override int GetHashCode() => Hash;
        public override string ToString() => Name;
        public IEnumerable<<#= epk #>> GetGenerators()
        {
<#
        for (int i = 0; i < k; ++i)
        {
#>
                <#= canfor[i] #>
                        yield return <#= cantpl[i] #>

<#
        }
#>
        }
        public IEnumerable<<#= epk #>> GetElements()
        {
               <#
        for (var i = 0; i < k; ++i)
        {
#>
                <#= fori[i] #>
<#
        }
#>
                yield return new(<#= Glue(ei, ", ") #>);
        }
        public IEnumerator<<#= epk #>> GetEnumerator() => GetElements().GetEnumerator();
        IEnumerator IEnumerable.GetEnumerator() => GetElements().GetEnumerator();
}

public readonly struct <#= epk #> : IElt<<#= epk #>> <#= whereTn #>
{
<#
        for (var i = 0; i < k; ++i)
        {
#>
        <#= TiEi[i] #>
<#
        }
#>
        public Ep<#= k #>(<#= Glue(Tiei, ", ") #>)
        {
<#
        for (var i = 0; i < k; ++i)
        {
#>
                <#= Eiei[i] #>
<#
        }
#>
                Hash = (<#= Glue(hshei, ", ") #>).GetHashCode();
        }

        public bool Equals(<#= epk #> other) => other.Hash == Hash && (<#= Glue(Ei, ", ") #>).Equals((<#= Glue(compi, ", ") #>));
        public int CompareTo(<#= epk #> other)
        {
                return (<#= Glue(Ei, ", ") #>).CompareTo((<#= Glue(compi, ", ") #>));
        }
        public int Hash { get; }
        public override int GetHashCode() => Hash;
        public override string ToString() => $"(<#= Glue(Ei, ", ", "{{{0}}}") #>)";

        public void Deconstruct(<#= Glue(Tiei, ", ", "out {0}") #>)
        {
            (<#= Glue(ei, ", ") #>) = (<#= Glue(Ei, ", ") #>);
        }
}

public static partial class Product
{
    public static <#= gpk #> Group<<#= Glue(Ti, ", ") #>>(<#= Glue(igtk, ", ") #>)
        <#= whereTn #>
    {
        return new(<#= Glue(gi, ", ") #>);
    }

    public static <#= epk #> Elt<<#= Glue(Ti, ", ") #>>(<#= Glue(Tiei, ", ") #>)
        <#= whereTn #>
    {
        return new(<#= Glue(ei, ", ") #>);
    }

    public static ConcreteGroup<<#= epk #>> Generate<<#= Glue(Ti, ", ") #>>(<#= Glue(igtk, ", ") #>)
        <#= whereTn #>
    {
        return new(Group(<#= Glue(gi, ", ") #>));
    }

}

<#
    }
#>